openapi: 3.0.4
info:
  title: EasyPay
  description: |-
    [Github repository](https://github.com/marcopaggioro/easy-pay)
  contact:
    email: marco.paggioro@studenti.unipegaso.it
  version: 1.0.0
servers:
  - url: https://easypay-api.paggiorocloud.it
tags:
  - name: Wallet
    description: Routes related to wallet
  - name: User
    description: Routes related to user
paths:
  /user/login/check:
    get:
      tags:
        - User
      summary: Check if client has a valid JWT token
      responses:
        '200':
          description: User has a valid JWT
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OkResponse"
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /user/login:
    post:
      tags:
        - User
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginPayload'
      responses:
        '200':
          description: User logged in
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        '400':
          description: Invalid payload
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '401':
          description: Invalid credentials
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /user/logout:
    post:
      tags:
        - User
      summary: Logout user
      responses:
        '200':
          description: User logged out
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OkResponse"
        '401':
          description: Unauthorized

  /user:
    post:
      tags:
        - User
      summary: Create an user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterPayload'
      responses:
        '200':
          description: User created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        '400':
          description: Invalid payload
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    get:
      tags:
        - User
      summary: Get user data
      responses:
        '200':
          description: Got user data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDataResponse"
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    patch:
      tags:
        - User
      summary: Update user data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDataPayload'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OkResponse"
        '400':
          description: Invalid payload
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /wallet:
    get:
      tags:
        - Wallet
      summary: Get wallet
      parameters:
        - name: page
          in: query
          description: Page number of operation history
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Got wallet
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WalletResponse"
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /wallet/interacted-customers:
    get:
      tags:
        - Wallet
      summary: Get recent interacted customers
      responses:
        '200':
          description: Got recent interacted customers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/InteractedCustomer"
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /wallet/recharge:
    post:
      tags:
        - Wallet
      summary: Recharge wallet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: number
              example: 123.45
      responses:
        '200':
          description: Wallet recharged
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OkResponse"
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /wallet/transfer:
    post:
      tags:
        - Wallet
      summary: Transfer money
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferMoneyPayload'
      responses:
        '200':
          description: Money transferred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OkResponse"
        '400':
          description: Invalid payload
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '401':
          description: Unauthorized
        '404':
          description: Recipient customer email not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /wallet/scheduler:
    get:
      tags:
        - Wallet
      summary: Get scheduled operations
      responses:
        '200':
          description: Scheduled operation deleted
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScheduledOperation'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      tags:
        - Wallet
      summary: Create scheduled operations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateScheduledOperationPayload'
      responses:
        '200':
          description: Scheduled operation created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OkResponse"
        '400':
          description: Invalid payload
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /wallet/scheduler/{scheduledOperationId}:
    delete:
      tags:
        - Wallet
      summary: Delete a scheduled operation
      parameters:
        - name: scheduledOperationId
          in: path
          description: Scheduled operation id
          required: true
          schema:
            type: string
            format: uuid
            example: "0afe431b-4e19-4790-a3df-8ececd2a02d2"
      responses:
        '200':
          description: Scheduled operation deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"


components:
  schemas:
    OkResponse:
      type: object
      properties:
        ok:
          type: boolean
          example: true
      required:
        - ok

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Something went wrong"
      required:
        - error

    LoginPayload:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "marco.paggioro@studenti.unipegaso.it"
        encryptedPassword:
          type: string
          description: SHA512 encrypted password
          example: "2bbe0c48b91a7d1b8a6753a8b9cbe1db16b84379f3f91fe115621284df7a48f1cd71e9beb90ea614c7bd924250aa9e446a866725e685a65df5d139a5cd180dc9"
      required:
        - email
        - encryptedPassword

    LoginResponse:
      type: object
      properties:
        customerId:
          type: string
          format: uuid
          example: "0afe431b-4e19-4790-a3df-8ececd2a02d2"
        expiration:
          type: number
          description: Millis from EPOCH
          example: 1744797585000
      required:
        - customerId
        - expiration

    RegisterPayload:
      type: object
      properties:
        firstName:
          type: string
          example: Marco
        lastName:
          type: string
          example: Paggioro
        birthDate:
          type: string
          format: date
          example: 1998-06-01
        email:
          type: string
          format: email
          example: "marco.paggioro@studenti.unipegaso.it"
        lastEdit:
          type: number
          description: Millis from EPOCH
          example: 1744789213639
      required:
        - firstName
        - lastName
        - birthDate
        - email
        - lastEdit

    UserDataResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "0afe431b-4e19-4790-a3df-8ececd2a02d2"
        firstName:
          type: string
          example: Marco
        lastName:
          type: string
          example: Paggioro
        birthDate:
          type: string
          format: date
          example: 1998-06-01
        email:
          type: string
          format: email
          example: "marco.paggioro@studenti.unipegaso.it"
        lastEdit:
          type: number
          description: Millis from EPOCH
          example: 1744789213639
      required:
        - id
        - firstName
        - lastName
        - birthDate
        - email
        - lastEdit

    UpdateUserDataPayload:
      type: object
      properties:
        firstName:
          type: string
          example: Marco
        lastName:
          type: string
          example: Paggioro
        birthDate:
          type: string
          format: date
          example: 1998-06-01
        email:
          type: string
          format: email
          example: "marco.paggioro@studenti.unipegaso.it"

    WalletOperation:
      type: object
      properties:
        interactedCustomerId:
          type: string
          format: uuid
          example: "0afe431b-4e19-4790-a3df-8ececd2a02d2"
        interactedFirstName:
          type: string
          example: Marco
        interactedLastName:
          type: string
          example: Paggioro
        interactedEmail:
          type: string
          format: email
          example: "marco.paggioro@studenti.unipegaso.it"
        transactionId:
          type: string
          format: uuid
          example: "0afe431b-4e19-4790-a3df-8ececd2a02d2"
        senderCustomerId:
          type: string
          format: uuid
          example: "0afe431b-4e19-4790-a3df-8ececd2a02d2"
        recipientCustomerId:
          type: string
          format: uuid
          example: "0afe431b-4e19-4790-a3df-8ececd2a02d2"
        description:
          type: string
          example: "Pizza"
        instant:
          type: number
          description: Millis from EPOCH
          example: 1744789213639
        amount:
          type: number
          example: 123.45
      required:
        - interactedCustomerId
        - interactedFirstName
        - interactedLastName
        - interactedEmail
        - transactionId
        - senderCustomerId
        - recipientCustomerId
        - instant
        - amount

    WalletResponse:
      type: object
      properties:
        balance:
          type: number
          example: 123.45
        pageSize:
          type: number
          example: 1
        historyCount:
          type: number
          example: 80
        history:
          type: array
          items:
            $ref: '#/components/schemas/WalletOperation'
      required:
        - balance
        - pageSize
        - historyCount
        - history

    InteractedCustomer:
      type: object
      properties:
        interactedCustomerId:
          type: string
          format: uuid
          example: "0afe431b-4e19-4790-a3df-8ececd2a02d2"
        interactedFirstName:
          type: string
          example: Marco
        interactedLastName:
          type: string
          example: Paggioro
        interactedEmail:
          type: string
          format: email
          example: "marco.paggioro@studenti.unipegaso.it"
      required:
        - interactedCustomerId
        - interactedFirstName
        - interactedLastName
        - interactedEmail

    TransferMoneyPayload:
      type: object
      properties:
        recipientEmail:
          type: string
          format: email
          example: "marco.paggioro@studenti.unipegaso.it"
        amount:
          type: number
          example: 123.45
        description:
          type: string
          example: "Pizza"
      required:
        - recipientEmail
        - amount
        - description
        - interactedEmail

    ScheduledOperation:
      type: object
      properties:
        interactedCustomerId:
          type: string
          format: uuid
          example: "0afe431b-4e19-4790-a3df-8ececd2a02d2"
        interactedFirstName:
          type: string
          example: Marco
        interactedLastName:
          type: string
          example: Paggioro
        interactedEmail:
          type: string
          format: email
          example: "marco.paggioro@studenti.unipegaso.it"
        id:
          type: string
          format: uuid
          example: "0afe431b-4e19-4790-a3df-8ececd2a02d2"
        senderCustomerId:
          type: string
          format: uuid
          example: "0afe431b-4e19-4790-a3df-8ececd2a02d2"
        recipientCustomerId:
          type: string
          format: uuid
          example: "0afe431b-4e19-4790-a3df-8ececd2a02d2"
        description:
          type: string
          example: "Pizza"
        when:
          type: number
          description: Millis from EPOCH
          example: 1744789213639
        amount:
          type: number
          example: 123.45
        repeat:
          type: string
          example: "1 Giorno"
        status:
          type: string
          example: "In attesa"
      required:
        - interactedCustomerId
        - interactedFirstName
        - interactedLastName
        - interactedEmail
        - id
        - senderCustomerId
        - recipientCustomerId
        - description
        - when
        - amount
        - status

    CreateScheduledOperationPayload:
      type: object
      properties:
        recipientEmail:
          type: string
          format: email
          example: "marco.paggioro@studenti.unipegaso.it"
        description:
          type: string
          example: "Pizza"
        when:
          type: number
          description: Millis from EPOCH
          example: 1744789213639
        amount:
          type: number
          example: 123.45
        repeat:
          type: string
          description: Period Java-parsable string
          example: "P1M1D"
      required:
        - recipientEmail
        - description
        - when
        - amount

